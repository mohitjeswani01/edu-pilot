import { GoogleGenerativeAI } from "@google/generative-ai";
import OpenAI from "openai";

// CORRECTED: Using the exact variable names from your .env.local file
const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);
const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });

/**
 * Generates content using a three-tiered fallback system.
 * @param {string} prompt The prompt to send to the AI models.
 * @returns {Promise<{source: string, text: string}>} An object containing the source model and the generated text.
 */
export async function generateContentWithFallback(prompt) {
    // --- Attempt 1: Gemini 1.5 Pro (Highest Quality) ---
    try {
        console.log("Attempting to generate content with Gemini 1.5 flash...");
        const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" });
        const result = await model.generateContent(prompt);
        const response = await result.response;
        console.log("✅ Content successfully generated by: Gemini 1.5 flash");
        return { source: 'Gemini Pro', text: response.text() };
    } catch (geminiProError) {
        console.error("❌ Gemini 1.5 flash failed:", geminiProError.message);
    }

    // --- Attempt 2: Gemini 2.0 Flash (Fast Fallback) ---
    try {
        console.log("Attempting with Gemini 2.0 Flash...");
        const model = genAI.getGenerativeModel({ model: "gemini-2.0-flash" });
        const result = await model.generateContent(prompt);
        const response = await result.response;
        console.log("✅ Content successfully generated by: Gemini 2.0 Flash");
        return { source: 'Gemini Flash', text: response.text() };
    } catch (geminiFlashError) {
        console.error("❌ Gemini 2.0 Flash failed:", geminiFlashError.message);
    }

    // --- Attempt 3: OpenAI (GPT) ---
    try {
        console.log("Attempting with OpenAI (GPT)...");
        const chatCompletion = await openai.chat.completions.create({
            messages: [{ role: 'user', content: prompt }],
            model: 'gpt-3.5-turbo',
        });
        console.log("✅ Content successfully generated by: OpenAI (GPT)");
        return { source: 'GPT', text: chatCompletion.choices[0].message.content };
    } catch (openaiError) {
        console.error("❌ OpenAI (GPT) failed:", openaiError.message);
    }

    // If all models fail, throw a final error
    throw new Error("All AI models failed to generate content.");
}
